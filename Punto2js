const { Console } = require('console');
let fs = require('fs');
/**
 * Nombres de los archivos de lectura y escritura, modifique como considere.
 */
let ARCHIVO_LECTURA = 'inB';
let ARCHIVO_ESCRITURA = 'outB'

/**
 * Método para realizar la lectura del problema, no modificar.
 */
async function input() {
    let line = 0;
    let readData = "";
    const readLine = () => {
        let inputLine = readData[line];
        line++;
        return inputLine;
    }
    return new Promise((resolve, reject) => {
        fs.readFile((ARCHIVO_LECTURA + '.txt'), 'utf-8', async (err, data) => {
            if (err) {
                reject(err);
            } else {
                readData = data.split("\n").map(e => e.replace('\r', ''));
                let [n, m] = readLine().split(" ").map(e => parseInt(e));
                let libros = [];
                for(let i = 0 ; i < m; ++i){
                    let data = readLine().split(" ");
                    let nombre = data[0];
                    let paginas = parseInt(data[1]);
                    libros.push(new Libro(nombre, paginas));
                }
                resolve(new Entrada(n, m, libros));
            }
        });
    });
}
/**
 * Método para realizar la escritura de la respuesta del problema, no modificar.
 */
async function output(obj) {
    let out = obj.tiempoTotal + "\n";
    for( let i = 0 ; i < obj.libroQueEmpieza.length ; ++i){
        out+= obj.libroQueEmpieza[i] + " " + obj.libroQueTermina[i] +"\n";
    }
    return new Promise((resolve, reject) => {
        fs.writeFile(ARCHIVO_ESCRITURA + '.txt', out, (err, list) => {
            if (err) reject(err);
            resolve(true);
        });
    });
}

async function EscritorP(primerLibro, ultimoLibro)
    {
        let primerLibro;
        let ultimoLibro;
            this.primerLibro = primerLibro;
            this.ultimoLibro = ultimoLibro;
    
    }

/**
 * Implementar el algoritmo y devolver un objeto de tipo Respuesta, el cual servirá
 * para imprimir la solución al problema como se requiere en el enunciado.
 */
async function solve(n, m, libros) {
    
    let sumaPaginas = 0;
    let dias = 0;
    for (let f = 0; f < libros.length; f++) {
        sumaPaginas += libros[f].paginas; // Suma de todas las paginas de los libros
    }
    let ppe = sumaPaginas / n; // paginas por escritor
    let escritor = [];
    let escritorPs = [];
    let ordenPaginas = [];

    for (let g = 0; g < n; g++) {
        escritor[g] = ppe;
    }
    let diferencia = (sumaPaginas - ((ppe*n)-1));

    for (let index = 0; index < libros.length; index++) {
        ordenPaginas.push(libros[index].paginas);
    }

    ordenPaginas.sort(function(a, b){return a - b});

    let i = 0, j = 0, k = 0, u = 0;
    console.log(sumaPaginas +": suma de paginas");
    console.log(ppe +": paginas por escritor");
    console.log(n +": cantidad escritores");
    console.log(m +": cantidad libros");

    while (true) {
        console.log(i +": i ");
        console.log(j +": j ");
        
        if(i == n-1){
            if(j == m-1){             
                escritorPs.push(new escritorP(k, u));
            }
            escritor[i] -= libros[j].paginas;
            u = j;
            j++;
        }

        if ((escritor[i] - libros[j].paginas >= -diferencia) && j!=m-1) {
            escritor[i] -= libros[j].paginas;
            u = j;
            j++;
            
        } else {
            escritorPs.push(new escritorP(k, u));
            i++;
            k = u;               
        }
        if (j == m - 1) {
            const primerlibrito = [];
            const ultimolibrito = [];
            ultimolibrito = new String[n];
            for (let l = 0; l < escritor.length; l++) {
                primerlibrito[l].push( escritorPs[l].primerLibro.toString());
                ultimolibrito[l].push( escritorPs[l].ultimoLibro.toString());
            }
            return new Respuesta(dias, primerlibrito, ultimolibrito);
        }
    }
}
async function main() {
    const inp = await input();
    let res = await solve(inp.n, inp.m, inp.libros);
    await output(res);
}


function Entrada(n, m, libros){
    this.n = n;
    this.m = m;
    this.libros = libros; 
}
function Libro(nombre, paginas){
    this.nombre = nombre;
    this.paginas = paginas;
}
function Respuesta(tiempoTotal, libroQueEmpieza, libroQueTermina){
    this.tiempoTotal = tiempoTotal;
    /**
     * Esta variable contiene en su posición i, el nombre del libro por el que empieza el i-ésimo
     * escritor.
     */
    this.libroQueEmpieza = libroQueEmpieza;
    /**
     * Esta variable contiene en su posición i, el nombre del libro por el que termina el i-ésimo
     * escritor.
     */
    this.libroQueTermina = libroQueTermina;
}

main();
